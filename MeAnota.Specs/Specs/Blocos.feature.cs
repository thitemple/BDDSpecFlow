// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18010
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MeAnota.Specs.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ListarCriarEApagarBlocosDeNotasFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Blocos.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Listar, criar e apagar blocos de notas", "Como um usuário cadastrado e logado no sistema\r\nEu quero poder listar, criar e ap" +
                    "agar blocos de notas", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Listar, criar e apagar blocos de notas")))
            {
                MeAnota.Specs.Specs.ListarCriarEApagarBlocosDeNotasFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("que existe um usuário \"eu@templecoding.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 7
 testRunner.And("que o usuário \"eu@templecoding.com\" está logado no site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Listar os blocos cadastrados")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Listar, criar e apagar blocos de notas")]
        public virtual void ListarOsBlocosCadastrados()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listar os blocos cadastrados", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nome",
                        "Email"});
            table1.AddRow(new string[] {
                        "Bloco Principal",
                        "eu@templecoding.com"});
            table1.AddRow(new string[] {
                        "Bloco numero 2",
                        "eu@templecoding.com"});
#line 10
 testRunner.Given("que eu tenho os seguintes blocos cadastrados", ((string)(null)), table1, "Dado ");
#line 14
 testRunner.When("eu visito \"/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nome"});
            table2.AddRow(new string[] {
                        "Bloco Principal"});
            table2.AddRow(new string[] {
                        "Bloco numero 2"});
#line 15
 testRunner.Then("eu vejo", ((string)(null)), table2, "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Listar os blocos cadastrados somente do usuario logado")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Listar, criar e apagar blocos de notas")]
        public virtual void ListarOsBlocosCadastradosSomenteDoUsuarioLogado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listar os blocos cadastrados somente do usuario logado", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 21
 testRunner.Given("que existe um usuário \"outro@email.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nome",
                        "Email"});
            table3.AddRow(new string[] {
                        "Bloco principal",
                        "eu@templecoding.com"});
            table3.AddRow(new string[] {
                        "Bloco numero 2",
                        "outro@vintem.com.br"});
#line 22
 testRunner.And("que eu tenho os seguintes blocos cadastrados", ((string)(null)), table3, "E ");
#line 26
 testRunner.When("eu visito \"/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nome"});
            table4.AddRow(new string[] {
                        "Bloco principal"});
#line 27
 testRunner.Then("eu vejo", ((string)(null)), table4, "Entao ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Nome",
                        "Bloco numero 2"});
#line 30
 testRunner.But("eu não vejo", ((string)(null)), table5, "Mas ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adicionar um novo bloco com sucesso")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Listar, criar e apagar blocos de notas")]
        public virtual void AdicionarUmNovoBlocoComSucesso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adicionar um novo bloco com sucesso", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 35
 testRunner.When("eu visito \"/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 36
  testRunner.And("eu clico em \"Criar Novo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Nome",
                        "Spec Bloco"});
#line 37
  testRunner.And("eu preencho", ((string)(null)), table6, "E ");
#line 40
  testRunner.And("eu clico no botão \"Criar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 41
 testRunner.Then("eu vejo \"Spec Bloco\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line 42
  testRunner.And("eu vejo \"Bloco adicionado com sucesso\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Excluir um bloco com sucesso")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Listar, criar e apagar blocos de notas")]
        public virtual void ExcluirUmBlocoComSucesso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Excluir um bloco com sucesso", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nome",
                        "Email"});
            table7.AddRow(new string[] {
                        "Bloco principal",
                        "eu@templecoding.com"});
#line 45
 testRunner.Given("que eu tenho os seguintes blocos cadastrados", ((string)(null)), table7, "Dado ");
#line 48
 testRunner.When("eu visito \"/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 49
  testRunner.And("eu clico em \"Excluir\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 50
  testRunner.And("eu confirmo a mensagem de cancelamento \"Deseja realmente excluir esse Bloco?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 51
 testRunner.Then("eu vejo \"Bloco excluído com sucesso\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 52
 testRunner.But("eu não vejo \"Bloco principal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Mas ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
